return {
  {
    "LazyVim/LazyVim",
    opts = {
      colorscheme = "catppuccin",
    },
  },
  {
    "lyokha/vim-xkbswitch",
    lazy = true,
  },

  {
    "ahmedkhalf/project.nvim",
    opts = {
      patterns = { ">Projects", ".git" },
      detection_methods = { "patterns" },
    },
  },
  {
    "nvim-neo-tree/neo-tree.nvim",
    opts = {
      window = {
        position = "right",
      },
    },
  },
  {
    "lewis6991/gitsigns.nvim",
    opts = {
      current_line_blame = true,
      current_line_blame_opts = {
        delay = 200,
      },
    },
  },
  {
    "nvim-lualine/lualine.nvim",
    opts = {
      options = {
        component_separators = "|",
        section_separators = { left = "", right = "" },
      },
      sections = {
        lualine_a = { "mode" },
        lualine_b = { "branch" },
        lualine_c = { { "filename", path = 1 } },
        lualine_x = { "encoding", "fileformat", "filetype" },
        lualine_y = { "progress" },
        lualine_z = { "location" },
      },
    },
  },
  {
    "hrsh7th/nvim-cmp",
    dependencies = {
      {
        "f3fora/cmp-spell",
      },
    },
    opts = function(_, opts)
      table.insert(opts.sources, 1, {
        name = "spell",
        option = {
          keep_all_entries = false,
          enable_in_context = function()
            return true
          end,
        },
      })
    end,
  },
  {
    "nvim-telescope/telescope.nvim",
    opts = {
      defaults = {
        path_display = function(opts, path)
          local home = require("plenary.path").path.home
          local cwd = vim.fn.getcwd()
          local tail = require("telescope.utils").path_tail(path)
          local path_in_cwd = string.gsub(path, string.gsub(cwd, "%-", "%%-"), ".")
          local shorten_path = string.gsub(path_in_cwd, home, "~")
          return string.format("%s (%s)", tail, shorten_path), { { { 1, #tail }, "Constant" } }
        end,
      },
    },
  },
  -- {
  --   "TabbyML/vim-tabby",
  --   event = "BufRead",
  -- },
}
